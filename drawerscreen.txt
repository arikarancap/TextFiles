import React, { useState } from "react";
import { View, Text, Image, TouchableOpacity, StyleSheet, Pressable, Dimensions, LayoutAnimation } from 'react-native';
import { NavigationContainer } from '@react-navigation/native';
import { createDrawerNavigator, DrawerContentScrollView, DrawerItem } from '@react-navigation/drawer';
import FontAwesome5 from 'react-native-vector-icons/FontAwesome5';
import AntDesign from 'react-native-vector-icons/AntDesign';
import MaterialIcons from 'react-native-vector-icons/MaterialIcons';
import MaterialCommunityIcons from 'react-native-vector-icons/MaterialCommunityIcons';
import Octicons from 'react-native-vector-icons/Octicons';


import { StackNavigator } from './StackNavigator'
import {
    Home,
    PreConfiguration,
    Forgot,
    Extraction,
    Details,
    Common,
    Groups
} from '../screens';
import { assets, COLORS, ROUTES } from '../constants';
import { useLogin } from './LoginProvider';
// import { loadPartialConfigAsync } from "@babel/core";
const Drawer = createDrawerNavigator();


const CustomDrawerContent = ({ navigation }) => {
    const { setIsLoggedIn, SubMenu, setSubMenu } = useLogin();
    const [division, setDivision] = useState('')
    const [subdivision, setSubDivision] = useState('')

    return (
        <DrawerContentScrollView
            scrollEnabled={true}
            contentContainerStyle={{ flex: 1 }}
        >
            {/* Header Details */}
            <View style={{ flex: 0.1, backgroundColor: 'white' }} >
                <TouchableOpacity style={styles.profile}>
                    <View style={{ marginLeft: 10, }} >
                        <Text style={styles.ProfileHeader}>
                            Bluetooth App
                        </Text>
                        <Text style={styles.ProfileExplanation} >
                            View your Slots
                        </Text>
                    </View>
                    <Image source={assets.bluetoothimage}
                        style={styles.blutoothImage}
                    />
                </TouchableOpacity>
            </View>
            {/* Drawer Menu List */}
            <View style={{ flex: 0.9, paddingHorizontal: 0, backgroundColor: 'white' }}>
                <View>
                    <DrawerItem
                        label="Home"
                        style={[styles.drawerItem, { marginTop: 30 }]}
                        icon={({ color, size, focused }) => (
                            <FontAwesome5 name={'house-user'} size={18} color={'black'} />
                        )}
                        labelStyle={styles.labelStyle}
                        onPress={() => {
                            navigation.navigate("Home");
                        }}

                    />
                    <DrawerItem
                        label="PreConfiguration"
                        icon={({ color, size, focused }) => (
                            <FontAwesome5 name={'wrench'} size={18} color={'black'} />
                        )}
                        style={styles.drawerItem}
                        labelStyle={styles.labelStyle}
                        onPress={() => {
                            navigation.navigate("PreConfiguration");
                        }}
                    />

                    <DrawerItem
                        label="Extraction"
                        style={styles.drawerItem}
                        icon={({ color, size, focused }) => (
                            <FontAwesome5 name={'file'} size={18} color={'black'} />
                        )}
                        labelStyle={styles.labelStyle}
                        onPress={() => {
                            navigation.navigate("Extraction");
                        }}
                    />


                    <DrawerItem
                        label="Common"
                        // focused={focus ? true : false}
                        icon={({ color, size, focused }) => (
                            <MaterialIcons name={'data-usage'} size={18} color={'black'} />
                        )}
                        style={styles.drawerItem}
                        labelStyle={styles.labelStyle}
                        onPress={() => {
                            // navigation.navigate("Slot1");
                            LayoutAnimation.configureNext(LayoutAnimation.Presets.easeInEaseOut)
                            setDivision((e) => !e)
                        }}
                    />
                    {division ? (
                        <View>
                            <DrawerItem
                                label="Groups"
                                icon={({ color, size, focused }) => (
                                    <FontAwesome5 name={'layer-group'} size={18} color={'black'} />
                                )}
                                style={[styles.drawerItem, { marginLeft: 70 }]}
                                labelStyle={styles.labelStyle}
                                onPress={() => {
                                    navigation.navigate("Groups");
                                }}
                            />
                            <DrawerItem
                                label="Tracks"
                                icon={({ color, size, focused }) => (
                                    <MaterialIcons name={'multitrack-audio'} size={18} color={'black'} />
                                )}
                                style={[styles.drawerItem, { marginLeft: 70 }]}
                                labelStyle={styles.labelStyle}
                                onPress={() => {
                                    navigation.navigate("LoginShow");
                                }}
                            />
                            <DrawerItem
                                label="Shedules"
                                icon={({ color, size, focused }) => (
                                    <MaterialCommunityIcons name={'timetable'} size={18} color={'black'} />
                                )}
                                style={[styles.drawerItem, { marginLeft: 70 }]}
                                labelStyle={styles.labelStyle}
                                onPress={() => {
                                    navigation.navigate("LoginShow");
                                }}

                            />
                        </View>
                    )
                        : null}
                    <DrawerItem
                        label="Devices"
                        // focused={focus ? true : false}
                        icon={({ color, size, focused }) => (
                            <MaterialIcons name={'important-devices'} size={18} color={'black'} />
                        )}
                        style={styles.drawerItem}
                        labelStyle={styles.labelStyle}
                        onPress={() => {
                            navigation.navigate("Slot1");
                            LayoutAnimation.configureNext(LayoutAnimation.Presets.easeInEaseOut)
                            setSubDivision((e) => !e)
                        }}
                    />
                    {subdivision ? (
                        <View>
                            <DrawerItem
                                label="Master"
                                icon={({ color, size, focused }) => (
                                    <MaterialCommunityIcons name={'semantic-web'} size={18} color={'black'} />
                                )}
                                style={[styles.drawerItem, { marginLeft: 70 }]}
                                labelStyle={styles.labelStyle}
                                onPress={() => {
                                    navigation.navigate("LoginShow");
                                }}
                            />
                            <DrawerItem
                                label="BackPlane"
                                icon={({ color, size, focused }) => (
                                    <Octicons name={'paper-airplane'} size={18} color={'black'} />
                                )}
                                style={[styles.drawerItem, { marginLeft: 70 }]}
                                labelStyle={styles.labelStyle}
                                onPress={() => {
                                    navigation.navigate("LoginShow");
                                }}
                            />
                            <DrawerItem
                                label="Quad"
                                icon={({ color, size, focused }) => (
                                    <MaterialIcons name={'all-inclusive'} size={18} color={'black'} />
                                )}
                                style={[styles.drawerItem, { marginLeft: 70 }]}
                                labelStyle={styles.labelStyle}
                                onPress={() => {
                                    navigation.navigate("LoginShow");
                                }}

                            />
                            <DrawerItem
                                label="Communication"
                                icon={({ color, size, focused }) => (
                                    <MaterialIcons name={'bluetooth-searching'} size={18} color={'black'} />
                                )}
                                style={[styles.drawerItem, { marginLeft: 70 }]}
                                labelStyle={styles.labelStyle}
                                onPress={() => {
                                    navigation.navigate("LoginShow");
                                }}

                            />
                            <DrawerItem
                                label="Display"
                                icon={({ color, size, focused }) => (
                                    <FontAwesome5 name={'wrench'} size={18} color={'black'} />
                                )}
                                style={[styles.drawerItem, { marginLeft: 70 }]}
                                labelStyle={styles.labelStyle}
                                onPress={() => {
                                    navigation.navigate("LoginShow");
                                }}

                            />
                        </View>
                    )
                        : null}

                </View>


            </View>
            <View style={{
                flex: 0.1,
                backgroundColor: 'orange',
            }}>
                <DrawerItem
                    label="Logout"
                    style={styles.drawerItem}
                    icon={({ color, size, focused }) => (
                        <FontAwesome5 name={'arrow-circle-left'} size={18} color={'black'} />
                    )}
                    labelStyle={[styles.labelStyle, { marginTop: 0, fontSize: 20 }]}
                    onPress={() => {
                        setIsLoggedIn(false);
                    }}
                />
            </View>
        </DrawerContentScrollView>
    )
}

export function MainDrawerScreen() {
    const { setIsLoggedIn, SubMenu, setSubMenu } = useLogin();
    return (
        <NavigationContainer>
            <Drawer.Navigator
                drawerType="slide"
                overlayColor="transparent"
                initialRouteName="Groups"
                drawerStyle={styles.drawer}
                sceneContainerStyle={{ backgroundColor: 'transparent' }}
                drawerContent={props => {
                    return (
                        <CustomDrawerContent navigation={props.navigation} />
                    )
                }}
                style={{ width: 200 }}

                screenOptions={{
                    // drawerActiveBackgroundColor: 'blue',
                    headerShown: true,
                    swipeEnabled: false,
                    gestureEnabled: false,
                    headerTitleAlign: 'center',
                    headerStyle: {
                        backgroundColor: COLORS.darkBlue,
                    },
                    headerTintColor: '#0A2647',
                    // drawerActiveTintColor: 'red',
                    // drawerActiveBackgroundColor: 'blue',
                    headerTitleStyle: {
                        fontSize: 21,
                        fontWeight: 'bold',
                    },
                    drawerStyle: {
                        width: 280,
                    },
                    drawerItemStyle: {
                        borderRadius: 20,
                        // width: '100%'
                        marginLeft: 10
                    },
                    drawerLabelStyle: {
                        fontSize: 16
                    }

                }}


            >
                <Drawer.Screen
                    name="Home"
                    component={Home}
                    options={{
                        title: 'Bluetooth App',
                        // headerTitle: () => <Text style={{ color: 'black' }}>Hello</Text>,
                        headerRight: () =>
                            <View style={{ marginRight: 10 }} >
                                <AntDesign name={'logout'} size={20} color={'black'} onPress={() => { setIsLoggedIn(false) }} />
                            </View>
                    }}
                />
                {
                    ROUTES.map((item, index) => {
                        return (
                            <Drawer.Screen
                                key={index}
                                name={item.label}
                                component={item.component}
                                options={{
                                    title: item.label,
                                    headerShown: true

                                }}
                            />
                        )
                    })
                }

                {/* <Drawer.Screen
                    name="Extraction"
                    component={Extraction}
                    options={{
                        title: 'Extraction',
                        headerShown: false

                    }}
                />
                <Drawer.Screen
                    name="Forgot"
                    component={Forgot}
                    options={{
                        title: 'Forgot',
                        headerShown: false

                    }}
                />
                <Drawer.Screen
                    name="Details"
                    component={Details}
                    options={{
                        title: 'Details',
                        headerShown: false
                    }}
                />

                <Drawer.Screen
                    name="Home"
                    component={Home}
                    options={{
                        title: 'Bluetooth App',
                        // headerTitle: () => <Text style={{ color: 'black' }}>Hello</Text>,
                        headerRight: () =>
                            <View style={{ marginRight: 10 }} >
                                <AntDesign name={'logout'} size={20} color={'black'} onPress={() => { setIsLoggedIn(false) }} />
                            </View>
                    }}
                />
                <Drawer.Screen
                    name="PreConfiguration"
                    component={PreConfiguration}
                    options={{
                        title: 'Bluetooth App',
                        // headerTitle: () => <Text style={{ color: 'black' }}>Hello</Text>,
                        headerRight: () =>
                            <View style={{ marginRight: 10 }} >
                                <AntDesign name={'logout'} size={20} color={'black'} onPress={() => { setIsLoggedIn(false) }} />
                            </View>
                    }}
                />

                <Drawer.Screen
                    name="Common"
                    component={Common}
                    options={{
                        title: 'common',
                        headerShown: false
                    }}
                />
                <Drawer.Screen
                    name="Groups"
                    component={Groups}
                    options={{
                        title: 'Groups',
                        headerShown: false
                    }}
                /> */}

            </Drawer.Navigator>
        </NavigationContainer>
    )
}
const styles = StyleSheet.create({
    body: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: 'orange'

    },
    text: {
        fontSize: 40,
        fontWeight: 'bold',
        margin: 10,
    },
    image: {
        width: 20,
        height: 20,
        margin: 5,
    },
    profile: {
        flexDirection: 'row',
        marginTop: 10,
        alignItems: 'center',
        padding: 10,
        marginBottom: 30,
        borderBottomWidth: 2,
        borderBottomColor: 'black'

    },
    CustomDrawerItemsStyle: {
        flexDirection: 'row',
        height: 40,
        marginBottom: 10,
        alignItems: 'center',
        paddingLeft: 10,
        borderRadius: 10,

    },
    customItemsName: {
        marginLeft: 15,
        color: 'black',
        fontSize: 45,

    },
    drawer: {
        flex: 1,
        width: 100,
        height: 200,
        paddingRight: 20,
        backgroundColor: 'green',
    },
    drawerItem: {
        // backgroundColor: 'skyblue',
        width: 300,
        margin: 0,
    },
    ProfileHeader: {
        color: 'black',
        fontSize: 23,
        marginLeft: 10
    },
    ProfileExplanation: {
        color: 'black',
        fontSize: 13,
        marginLeft: 10
    },
    labelStyle: {
        color: "black",
        fontSize: 15
    },
    blutoothImage: {
        width: 50,
        height: 50,
        borderRadius: 30,
        marginLeft: 30,
    }
})
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
  <TouchableOpacity key={index} activeOpacity={0.8}
                        onPress={() => {
                            setMenuIndex(menuIndex === index ? -1 : index)
                            LayoutAnimation.configureNext(LayoutAnimation.Presets.easeInEaseOut)
                        }}

                        style={{ backgroundColor: '#ccc', marginHorizontal: 10, borderRadius: 20, marginVertical: 5 }} >

                        <View style={{ flexDirection: 'row', paddingHorizontal: 10, paddingVertical: 12 }} >
                            <MaterialIcons name={item.type} size={18} color={'black'} />
                            <Text style={[{ fontSize: 16, paddingHorizontal: 26 }, {
                                color: menuIndex === index ? 'black' : 'grey'
                            }]} >{item.title}</Text>
                        </View>
                        {menuIndex === index
                            ? <View>
                                {item.menuList.map((subMenu, index) => {
                                    return (
                                        <TouchableNativeFeedback key={index} style={{ backgroundColor: 'white' }}  >
                                            <View style={{ flexDirection: 'row', paddingLeft: 70, paddingVertical: 12 }} >
                                                <MaterialIcons name={item.type} size={18} color={'black'} />
                                                <Text style={{ fontSize: 14, paddingHorizontal: 26 }} >{subMenu.title}</Text>
                                            </View>
                                        </TouchableNativeFeedback>
                                    )
                                })}

                            </View>
                            :
                            null
                        }
                    </TouchableOpacity>
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      <CustomTab title={'System'} system={system} message={'System'}
            OnPress={() => {
              LayoutAnimation.configureNext(LayoutAnimation.Presets.easeInEaseOut)
              resetMessage('System')
            }}
          />
          <CustomTab title={'Groups'} system={system} message={'Groups'}
            OnPress={() => {
              LayoutAnimation.configureNext(LayoutAnimation.Presets.easeInEaseOut)
              resetMessage('Groups')
            }}
          />
////////////////////////////////////////////////////////////////////////////////////////////////////////////
 DATA.common.schedules.map((item, index) => {
        temp = Object.keys(item)
        // console.log(item[temp[3]])
        // array1[index]= item[temp[index]]
        temp.map((subItem, index) => {
            // console.log(subItem)
            if (typeof item[subItem] == 'object') {
                // console.log('this is Object', typeof item[subItem])
                if (typeof item[subItem][0] === 'object') {
                    // array1.push(subItem)
                    item[subItem].map((item, index) => {
                        // console.log(index == 0 ? subItem : null, Object.entries(item))
                        // console.log('hii,', item)
                        array1.push([subItem, Object.entries(item)])
                    })
                }
                else if (typeof item[subItem][0] === 'string') {
                    array1.push([subItem, item[subItem]])
                }
            }
            else if (typeof item[subItem][0] == 'string') {
                // console.log('this is str', item[subItem])
                array1.push([subItem, item[subItem]])
            }
        })
        // console.log(item)
    })
    console.log(array1)